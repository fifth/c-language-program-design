30004:
程序填空，不要改变与输入输出有关的语句。
输入一个正整数 repeat (0<repeat<10)，做 repeat 次下列运算：
输入五级制成绩(A－E)，输出相应的百分制成绩(0－100)区间，要求使用switch语句。
五级制成绩对应的百分制成绩区间为：A(90-100)、B(80-89)、C(70-79)、D(60-69)和E(0-59),如果输入不正确的成绩，显示"Invalid input"。
输出使用以下语句：
printf("90-100\n"); 
printf("80-89\n"); 
printf("70-79\n"); 
printf("60-69\n");
printf("0-59\n");
printf("Invalid input\n");

输入输出示例：括号内是说明
输入
6ABCDEj   	(repeat=6，输入的五级成绩分别为A、B、C、D、E和无效的字符j) 
输出
90-100
80-89
70-79
60-69
0-59
Invalid input  	(输入数据不合法)


#include <stdio.h>
int main(void)
{
    char ch;
    int repeat, ri;

    scanf("%d", &repeat);
    for(ri = 1; ri <= repeat; ri++){
        ch = getchar();    
/*---------*/
    }
}
----------------------------------------------------------------------------------
30005:

程序填空，不要改变与输入输出有关的语句。
查询水果的单价。有4种水果，苹果(apples)、梨(pears)、桔子(oranges)和葡萄(grapes)，单价分别是3.00元/公斤，2.50元/公斤，4.10元/公斤和10.20元/公斤。
在屏幕上显示以下菜单(编号和选项)，用户可以连续查询水果的单价，当查询次数超过5次时，自动退出查询；不到5次时，用户可以选择退出。
当用户输入编号1～4，显示相应水果的单价(保留1位小数)；输入0，退出查询；输入其他编号，显示价格为0。
输入输出示例：括号内是说明
输入
3   (oranges的编号) 
0   (退出查询) 
输出
[1] apples
[2] pears
[3] oranges
[4] grapes
[0] Exit
price = 4.1
[1] apples
[2] pears
[3] oranges
[4] grapes
[0] Exit


#include <stdio.h>
int main(void)
{
    int choice, i;
    double price;

    for(i = 1; i <= 5; i++){
        printf("[1] apples\n");
        printf("[2] pears\n");
        printf("[3] oranges\n");
        printf("[4] grapes\n");
        printf("[0] Exit\n");
        scanf("%d", &choice);
        if(choice == 0)
            break;
        else{
/*---------*/
      	    printf("price = %0.1f\n", price);
        }
    }
}
----------------------------------------------------------
30062:

程序填空，不要改变与输入输出有关的语句。
输入21世纪所有的闰年。判断闰年的条件是：能被 4 整除但不能被 100 整除，或者能被 400 整除。
输出使用语句 printf("%d\n",year);	
输入输出示例：括号内是说明
输出
2000
2004
2008
2012
2016
2020
2024
2028
2032
2036
2040
2044
2048
2052
2056
2060
2064
2068
2072
2076
2080
2084
2088
2092
2096


#include <stdio.h>
int main(void)
{
    int year;

    for(year = 2000; year <= 2099; year++){
/*---------*/
    }
}
---------------------------------------------------------
40012:
程序填空，不要改变与输入输出有关的语句。
输入一个正整数repeat (0<repeat<10)，做repeat次下列运算：
读入1个正实数 eps，计算并输出下式的值，精确到最后一项的绝对值小于 eps(保留6位小数)。请使用 while 语句实现循环。
计算：1－1/4＋1/7－1/10＋1/13－1/16＋……
输入输出示例：括号内是说明
输入
2        (repeat=2)
2E-4     (eps=2E-4)
0.02      (eps=0.02)
输出
sum = 0.835549
sum = 0.826310


#include <stdio.h>
#include <math.h>
int main(void)
{
    int denominator, flag;
    int repeat, ri;
    double eps, item, sum;

    scanf("%d", &repeat);
    for(ri = 1; ri <= repeat; ri++){
        scanf("%le", &eps);
/*---------*/
      	printf("sum = %.6f\n", sum);
   }
}
-----------------------------------------------------------------
40013:
程序填空，不要改变与输入输出有关的语句。
输入一个正整数repeat (0<repeat<10)，做repeat次下列运算：
读入一批正整数(以零或负数为结束标志)，求其中的奇数和。请使用while语句实现循环。
输入输出示例：括号内是说明
输入
2   	(repeat=2)
1 3 90 7 0
8 7 4 3 70 5 6 101 -1
输出
The sum of the odd numbers is 11.
The sum of the odd numbers is 116.


#include <stdio.h>
int main(void)
{
    int x, sum;
    int repeat, ri;


    scanf("%d", &repeat);
    for(ri = 1; ri <= repeat; ri++){
        scanf("%d", &x);
/*---------*/
      	printf("The sum of the odd numbers is %d.\n", sum);
   }
}
-------------------------------------------------------------
40017:
程序填空，不要改变与输入输出有关的语句。
输入一个正整数 repeat (0<repeat<10)，做 repeat 次下列运算：
输入一个正整数 n，输出 2/1＋3/2＋5/3＋8/5＋……前n项之和，保留2位小数。(该序列从第2项起，每一项的分子是前一项分子与分母的和，分母是前一项的分子)
输入输出示例：括号内是说明
输入
3        (repeat=3) 
1        (n=1) 
5        (n=5) 
20       (n=20) 
输出
sum = 2.00   	(第1项是2.00)
sum = 8.39   	(前5项的和是8.39)
sum = 32.66  	(前20项的和是32.66)


#include <stdio.h>
int main(void)
{
    int i, n;
    int repeat, ri;
    double denominator, numerator, sum, temp;

    scanf("%d", &repeat);
    for(ri = 1; ri <= repeat; ri++){
        scanf("%d", &n);
/*---------*/
     	printf("sum = %.2f\n",sum);
   }
}
-----------------------------------------------------
40024:
程序填空，不要改变与输入输出有关的语句。
输入一个正整数 repeat (0<repeat<10)，做 repeat 次下列运算：
输入两个正整数 m 和 n(1<=m, n<=1000)，输出 m 与 n之间（含m,n）的所有满足各位数字的立方和等于它本身的数。
例如153的各位数字的立方和是 1^3＋5^3＋3^3＝153 ,这里a^b表示a的b次方。
输出使用语句：printf("%d\n", i);
输入输出示例：括号内为说明
输入：
2            (repeat=2)
100 400      (m=100, n=400)
1 100  	     (m=1, n=100)
输出：
result:
153          (1*1*1+5*5*5+3*3*3=153)
370          (3*3*3+7*7*7=370)
371          (3*3*3+7*7*7+1*1*1=371)
result:
1            (1*1*1=1)


#include "stdio.h"
int main(void)
{
    int i, digit, m, n, number, sum;
    int repeat, ri;

    scanf("%d",&repeat);
    for(ri = 1; ri <= repeat; ri++){
        scanf("%d%d", &m, &n);
        printf("result:\n");
/*---------*/
    }
}